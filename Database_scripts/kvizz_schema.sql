-- MySQL Script generated by MySQL Workbench
-- Tue Feb 16 00:57:35 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema kviz
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema kviz
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `kviz`  ;
USE `kviz` ;

-- -----------------------------------------------------
-- Table `kviz`.`categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`categories` (
  `Cat_id` INT(11) NOT NULL AUTO_INCREMENT,
  `Cat_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Cat_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 55
;


-- -----------------------------------------------------
-- Table `kviz`.`offline_responses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`offline_responses` (
  `response_id` INT(11) NOT NULL AUTO_INCREMENT,
  `participant_id` BIGINT(20) NOT NULL,
  `quiz_id` INT(11) NOT NULL,
  `option_id` INT(11) NOT NULL,
  `question_id` INT(11) NOT NULL,
  `response_statement` VARCHAR(50) NULL DEFAULT NULL,
  `response_time` VARCHAR(30) NULL DEFAULT NULL,
  `is_correct` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`response_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 202
;


-- -----------------------------------------------------
-- Table `kviz`.`question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`question` (
  `question_id` INT(11) NOT NULL AUTO_INCREMENT,
  `quiz_id` INT(11) NOT NULL,
  `Cat_id` INT(11) NOT NULL,
  `question_type` ENUM('MCQ', 'Fillup', 'Polling') NOT NULL,
  `question_statement` VARCHAR(250) NOT NULL,
  `serial_no` INT(11) NOT NULL,
  `difficulty` ENUM('Easy', 'Medium', 'Hard') NOT NULL,
  `question_timer` INT(11) NOT NULL,
  `correct_option` INT(11) NULL DEFAULT NULL,
  `max_points` INT(11) NOT NULL,
  `question_image` LONGBLOB NULL DEFAULT NULL,
  PRIMARY KEY (`question_id`),
  INDEX `FK_quest_cat` (`Cat_id` ASC),
  INDEX `FK_quest_quiz` (`quiz_id` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 200
;


-- -----------------------------------------------------
-- Table `kviz`.`options`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`options` (
  `option_id` INT(11) NOT NULL AUTO_INCREMENT,
  `question_id` INT(11) NOT NULL,
  `option_statement` VARCHAR(50) NOT NULL,
  `serial_no` INT(11) NOT NULL,
  PRIMARY KEY (`option_id`),
  INDEX `FK_options_quest` (`question_id` ASC),
  CONSTRAINT `FK_options_quest`
    FOREIGN KEY (`question_id`)
    REFERENCES `kviz`.`question` (`question_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 728
;


-- -----------------------------------------------------
-- Table `kviz`.`org_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`org_details` (
  `org_id` INT(11) NOT NULL AUTO_INCREMENT,
  `organization` VARCHAR(255) NULL DEFAULT NULL,
  `lang` VARCHAR(250) NULL DEFAULT NULL,
  `userid` INT(11) NULL DEFAULT NULL,
  `user_type` VARCHAR(250) NULL DEFAULT NULL,
  PRIMARY KEY (`org_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
;


-- -----------------------------------------------------
-- Table `kviz`.`tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`tags` (
  `tag_id` INT(11) NOT NULL AUTO_INCREMENT,
  `tag_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`tag_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 101
;


-- -----------------------------------------------------
-- Table `kviz`.`question_tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`question_tag` (
  `tag_id` INT(11) NULL DEFAULT NULL,
  `question_id` INT(11) NULL DEFAULT NULL,
  INDEX `FK_question_tag` (`question_id` ASC),
  INDEX `FK_question_tag2` (`tag_id` ASC),
  CONSTRAINT `FK_question_tag`
    FOREIGN KEY (`question_id`)
    REFERENCES `kviz`.`question` (`question_id`),
  CONSTRAINT `FK_question_tag2`
    FOREIGN KEY (`tag_id`)
    REFERENCES `kviz`.`tags` (`tag_id`))
ENGINE = InnoDB
;


-- -----------------------------------------------------
-- Table `kviz`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`users` (
  `userid` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(100) NOT NULL,
  `mobile_no` VARCHAR(12) NOT NULL,
  `password` VARCHAR(250) NOT NULL,
  `created_at` DATETIME NULL DEFAULT NULL,
  `fullname` VARCHAR(250) NOT NULL,
  `google_id` VARCHAR(255) NULL DEFAULT NULL,
  `activeToken` VARCHAR(255) NULL DEFAULT NULL,
  `activeExpires` VARCHAR(255) NULL DEFAULT NULL,
  `activestatus` TINYINT(4) NULL DEFAULT NULL,
  `user_image` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`userid`),
  UNIQUE INDEX `email` (`email` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 66
;


-- -----------------------------------------------------
-- Table `kviz`.`quiz`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`quiz` (
  `quiz_id` INT(11) NOT NULL AUTO_INCREMENT,
  `creator_id` BIGINT(20) NOT NULL,
  `created_at` DATETIME NULL DEFAULT NULL,
  `tittle` VARCHAR(70) NOT NULL,
  `description` VARCHAR(250) NOT NULL,
  `overall_timer` INT(11) NULL DEFAULT NULL,
  `quiz_present_date` DATE NULL DEFAULT NULL,
  `quiz_thumbnail` VARCHAR(255) NULL DEFAULT NULL,
  `quiz_pin` VARCHAR(250) NULL DEFAULT NULL,
  PRIMARY KEY (`quiz_id`),
  INDEX `fk_quiz_creator_idx` (`creator_id` ASC),
  CONSTRAINT `fk_quiz_creator`
    FOREIGN KEY (`creator_id`)
    REFERENCES `kviz`.`users` (`userid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 226
;


-- -----------------------------------------------------
-- Table `kviz`.`responses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `kviz`.`responses` (
  `response_id` INT(11) NOT NULL AUTO_INCREMENT,
  `participant_id` BIGINT(20) NOT NULL,
  `quiz_id` INT(11) NOT NULL,
  `option_id` INT(11) NOT NULL,
  `question_id` INT(11) NOT NULL,
  `response_statement` VARCHAR(50) NULL DEFAULT NULL,
  `response_time` VARCHAR(30) NULL DEFAULT NULL,
  `is_correct` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`response_id`),
  INDEX `FK_resp_option` (`option_id` ASC),
  INDEX `FK_resp_parti` (`participant_id` ASC),
  INDEX `FK_resp_question` (`question_id` ASC),
  INDEX `FK_resp_quiz` (`quiz_id` ASC),
  CONSTRAINT `FK_resp_option`
    FOREIGN KEY (`option_id`)
    REFERENCES `kviz`.`options` (`option_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_resp_parti`
    FOREIGN KEY (`participant_id`)
    REFERENCES `kviz`.`users` (`userid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_resp_question`
    FOREIGN KEY (`question_id`)
    REFERENCES `kviz`.`question` (`question_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_resp_quiz`
    FOREIGN KEY (`quiz_id`)
    REFERENCES `kviz`.`quiz` (`quiz_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 857
;

USE `kviz` ;

-- -----------------------------------------------------
-- procedure delete_question_details
-- -----------------------------------------------------

DELIMITER $$
USE `kviz`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_question_details`(

in quiz_id int, 
in question_s varchar(255) ,
in quest_id int
)
BEGIN


declare query_array varchar(255);
declare select_arr varchar(255);
declare ques_id int ;
				ALTER TABLE QUESTION_TAG DROP FOREIGN KEY FK_question_tag; 
                ALTER TABLE QUESTION_TAG DROP FOREIGN KEY FK_question_tag2;
                ALTER TABLE question DROP FOREIGN KEY  FK_quest_cat; 
                ALTER TABLE question DROP FOREIGN KEY  FK_quest_quiz;
                
                select distinct question_id into ques_id  from question where question_statement = question_s  ;
                
                DELETE FROM question_tag where question_id = ques_id;
			
                DELETE FROM options where question_id = ques_id;
                
                DELETE FROM question where question_id = ques_id;
                
                ALTER TABLE QUESTION_TAG ADD CONSTRAINT FK_question_tag FOREIGN KEY (question_id) REFERENCES question(question_id) ; 
                ALTER TABLE QUESTION_TAG ADD CONSTRAINT FK_question_tag2 FOREIGN KEY (tag_id) REFERENCES tags(tag_id);
                ALTER TABLE question ADD CONSTRAINT  FK_quest_cat FOREIGN KEY (quiz_id) REFERENCES quiz(quiz_id); 
                ALTER TABLE question ADD CONSTRAINT  FK_quest_quiz FOREIGN KEY (Cat_id) REFERENCES categories(cat_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insert_question_details
-- -----------------------------------------------------

DELIMITER $$
USE `kviz`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_question_details`(
in catId1 int,
in quiz_id int, 
in question_type varchar(255),
in question_statement varchar(255),
in serial_no int ,
in difficulty varchar(255),
in question_timer int,
in correct_option varchar(255) ,
in max_points int ,
in question_image longblob,
in option_state text,
in correct_serial int)
BEGIN
declare catId int;
declare tagId int;
declare query_array varchar(255);
declare select_arr varchar(255);
declare ques_id int ;
declare query_opt text;

declare option_state2 text;
declare value_1 int;
declare query_sel varchar(255);

set catId = 0;
set tagId = 0;
set query_array = "";
set select_arr="";
set ques_id =0;
set query_opt ="";

set option_state2 ="";
set value_1 = 0;
set query_sel ="";
                
                
                set catId = catId1;
               
                
                insert into question(quiz_id,Cat_id ,question_type ,question_statement,serial_no ,difficulty ,question_timer ,max_points ,question_image) 
                 values(quiz_id,catId ,question_type ,question_statement,serial_no ,difficulty ,question_timer ,max_points ,question_image);
                set ques_id = (select last_insert_id());
				
                
                set option_state2 = replace(option_state,"q_id",ques_id);
				
                set @query_opt = concat('insert into options(question_id,option_statement,serial_no) values',option_state2);
				PREPARE stmt1 FROM @query_opt;
				EXECUTE stmt1;
				DEALLOCATE PREPARE stmt1;
                set value_1 = correct_serial;
                set @corr_id=0;
                
                
                set @query_sel = concat('select option_id into @corr_id from options where serial_no = ',value_1,' and question_id =',ques_id);
                PREPARE stmt2 FROM @query_sel ;
                EXECUTE stmt2  ;
				DEALLOCATE PREPARE stmt2;
                
                
                update question set correct_option  = @corr_id  where question_id = ques_id;
                
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
